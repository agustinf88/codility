require("./L1/BinaryGap")(20);
require("./L3/TapeEquilibrium")([-100, 100]);
require("./L3/TapeEquilibrium")([3, 1, 2, 4, 3]);
require("./L4/FrogRiverOne")(5, [1, 3, 1, 4, 2, 3, 5, 4]);
require("./L4/MissingInteger")([1, 6, 4, 1, 2, 7, 8, 9, 10]);
require("./L4/MissingInteger")([-1, -3]);
require("./L4/MaxCounters")(5, [1, 2, 2, 2, 6, 2]);
require("./L4/MaxCounters")(5, [3, 4, 4, 6, 1, 4, 4]);
require("./L5/CountDiv")(0, 1, 2);
require("./L5/PassingCars")([0, 1, 0, 1, 1]);
require("./L5/PassingCars")([0, 0, 0, 0, 0, 1]);
require("./L5/PassingCars")([1]);
require("./L5/GenomicRangeQuery")("CAGCCTA", [2, 5, 0], [4, 5, 6]);
require("./L5/MinAvgTwoSlice")([4, 2, 2, 5, 1, 5, 8]);
require("./L5/MinAvgTwoSlice")([-3, -5, -8, -4, -10]);
require("./L6/Triangle")([10, 2, 5, 1, 8, 20]);
require("./L6/Triangle")([10, 50, 5, 1]);
require("./L6/Distinct")([2, 1, 1, 2, 3, 1]);
require("./L6/MaxProductOfTree")([-3, 1, 2, -2, 5, 6]);
require("./L6/NumberOfDiscIntersections")([1, 5, 2, 1, 4, 0]);
require("./L7/Brackets")("");
require("./L7/Fish")([4, 3, 2, 1, 5], [0, 1, 0, 0, 0]);
require("./L7/Fish")([4, 3, 2, 1, 5], [0, 1, 0, 1, 0]);
require("./L7/Nesting")("(()(())())");
require("./L7/StoneWall")([8, 8, 5, 7, 9, 8, 7, 4, 8]);
require("./L8/Dominator")([3, 4, 3, 2, 3, -1, 3, 3]);
require("./L8/EquiLeader");
require("./L9/MaxProfit");
